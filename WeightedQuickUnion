public class WeightedQuickUnion {
    public int width;
    public int area;
    public int parent[];
    public int size[];

    public WeightedQuickUnion(int width) {
        this.width = width;
        area = width * width;

        parent = new int[area];
        size = new int[area];

        for (int i = 0; i < area; i++) {
            parent[i] = i < width ? 0 : (i >= area - width ? area - width : i);
            size[i] = i < width || i >= area - width? 2 : 1;
        }
    }

    public void union(int p, int q) {
        int rootp = root(p);
        int rootq = root(q);
        if (rootp == rootq) return;

        if (size[rootp] < size[rootq]) {
            parent[rootp] = rootq;
            size[rootp] += rootq;
        } else {
            parent[rootq] = rootp;
            size[rootq] += rootp;
        }
    }

    public boolean connected(int p, int q) {
        return (root(p) == root(q));
    }

    public int root(int node) {
        while (node != parent[node]) {
            parent[node] = parent[parent[node]];
            node = parent[node];
        }
        return node;
    }
}
