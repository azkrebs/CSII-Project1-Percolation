import java.util.*;

public class Percolation {
    public int width;
    public int area;
    public boolean[] board;
    WeightedQuickUnion weightedQuickUnion;

    public Percolation(int width) {
        this.width = width;
        area = width * width;
        weightedQuickUnion = new WeightedQuickUnion(width);
    }

    public double simulate() {
        board = new boolean[area];

        for (int i = 0; i < area; i++) {
            weightedQuickUnion.parent[i] = i < width ? 0 : (Math.min(i, area - width));
            weightedQuickUnion.size[i] = i < width || i >= area - width? 2 : 1;
        }

        int opened = 0;
        int site;

        Random randomizer = new Random();

        while (weightedQuickUnion.disconnected(0, area - 1)) {
            site = randomizer.nextInt(area);

            if (!board[site]) {
                open(site);
                opened ++;
            }
        }

        return (double) opened / area;
    }

    public void open(int site) {
        int[] adjacent = new int[] {site + 1, site - 1, site - width, site + width};
        int neighbor;
        int column;
        
        for (int direction = 0; direction < 4; direction++) {

            neighbor = adjacent[direction];
            column = site % width;

            if (!(direction == 0 && column == width - 1)
                    && !(direction == 1 && column == 0)
                    && !(direction == 2 && site < width)
                    && !(direction == 3 && site >= area - width)
                    && board[neighbor]) {
                weightedQuickUnion.union(site, neighbor);
            }
        }

        board[site] = true;
    }

    public String toString() {
        String[] output = new String[this.width];
        int[] temporary;

        for (int row = 0; row < this.width; row++) {
            temporary = new int[this.width];
            for (int column = 0; column < this.width; column++) {
                temporary[column] = this.board[column + (row * this.width)] ? 1 : 0;
            }
            output[row] = Arrays.toString(temporary) + "\n";
        }
        return " " + Arrays.toString(output);
    }
}
