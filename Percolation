import java.util.*;

public class Percolation {
    public int dimension;
    public int area;
    public boolean board[];
    WeightedQuickUnion weightedQuickUnion;

    public Percolation(int dimension) {
        this.dimension = dimension;
        area = dimension * dimension;
    }

    public float percolate() {
        board = new boolean[area + 2];
        weightedQuickUnion = new WeightedQuickUnion(10);

        for (int i = 1; i <= dimension; i++) {
            weightedQuickUnion.union(area, i - 1);
            weightedQuickUnion.union(area + 1, area - i);
        }

        int counter = 0;
        int number;

        while (!weightedQuickUnion.connected(area, area + 1)) {
            Random random = new Random();
            number = random.nextInt(area);

            if (!board[number]) {
                open(number);
                System.out.println(this);
                counter += 1;
            }
        }

        return (float)counter / area;
    }

    public void open(int cell) {
        board[cell] = true;
        int[] adjacent = new int[] {cell + 1, cell - 1, cell - dimension, cell + dimension};

        for (int i = 0; i < 4; i++) {
            int neighbor = adjacent[i];
            if (neighbor > 0 && neighbor < area && board[neighbor]) {
                weightedQuickUnion.union(cell, neighbor);
            }
        }
    }

    public String toString() {
        String[] array = new String[this.dimension];
        for (int i = 0; i < this.dimension; i++) {
            int[] temparray = new int[this.dimension];
            for (int j = 0; j < this.dimension; j++) {
                temparray[j] = this.board[j + (i * this.dimension)] ? 1 : 0;
            }
            array[i] = Arrays.toString(temparray) + "\n";
        }
        return " " + Arrays.toString(array);
    }
}
