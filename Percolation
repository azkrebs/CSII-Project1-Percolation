import java.util.*;

public class Percolation {
    public int dimension;
    public int area;
    public boolean board[];
    public int parent[];
    private int size[];

    public Percolation(int n) {
        dimension = n;
        area = dimension * dimension;

        board = new boolean[area + 2];
        parent = new int[area + 2];
        size = new int[area + 2];

        for (int i = 0; i < area + 2; i++) {
            parent[i] = i;
            size[i] = 1;
        }
    }

    public void open(int cell) {
        board[cell] = true;
        int[] adjacent = new int[] {cell + 1, cell - 1, cell - dimension, cell + dimension};

        for (int i = 0; i < 4; i++) {
            int neighbor = adjacent[i];
            if (neighbor > 0 && neighbor < area && board[neighbor]) {
                union(cell, neighbor);
            }
        }
    }

    public void union(int p, int q) {
        int rootp = root(p);
        int rootq = root(q);
        if (rootp == rootq) return;
        if (size[rootp] < size[rootq]) {
            parent[rootp] = rootq;
            size[rootp] += rootq;
        } else {
            parent[rootq] = rootp;
            size[rootq] += rootp;
        }
    }

    public boolean connected(int p, int q) {
        return (root(p) == root(q));
    }

    public int root(int i) {
        while (i != parent[i]) {
            parent[i] = parent[parent[i]];
            i = parent[i];
        }
        return i;
    }
}
